import * as React from "react";
import Layout from "../../components/layout";
import { GatsbyImage } from "gatsby-plugin-image";
import BrowserWindow from "../../components/browserWindow";

const AIWorkflowLogging = ({ item, allFile }) => {
  const getImagesBySlug = (slug, allFile) => {
    const prefix = `portfolio_${slug}`;
    const matches = allFile.nodes.filter(({ name }) => name.startsWith(prefix));

    // Sort images by suffix number (default image has no number = 0)
    const sorted = matches.sort((a, b) => {
      const getIndex = (name) => {
        const match = name.match(/-(\d+)$/);
        return match ? parseInt(match[1]) : 0;
      };
      return getIndex(a.name) - getIndex(b.name);
    });

    return sorted;
  };

  const images = getImagesBySlug(item.slug, allFile);
  const heroImage = images[0];
  const gridImages = images.slice(1);

  function parseArrayFieldsToHTML(obj, options = {}) {
    const { fieldsToConvert = [], appendSuffix = "Html" } = options;
    const result = {
      ...obj,
    };

    fieldsToConvert.forEach((field) => {
      const value = obj[field];
      if (Array.isArray(value) && value.length > 1) {
        result[`${field}${appendSuffix}`] = `<ul>${value
          .map((item) => `<li>${item}</li>`)
          .join("")}</ul>`;
      } else if (Array.isArray(value)) {
        result[`${field}${appendSuffix}`] = `<p>${value.join("")}</p>`;
      }
    });

    return result;
  }

  if (!item) {
    return (
      <Layout pageTitle="Not Found">
        <h1 className="text-3xl"> 404â€“ Case Study Not Found </h1>{" "}
      </Layout>
    );
  }

  const itemHtml = parseArrayFieldsToHTML(item, {
    fieldsToConvert: ["impact", "problem", "solution"],
  });
  // Custom rendering logic for just this case study
  return (
    <Layout pageTitle={item.title}>
      <section className="py-5 portfolio">
        <div className="grid  items-top gap-9 mb-12">
          <div>
            <h2 className="w-full my-2 mb-3 font-normal text-white/50">
              {" "}
              {item.title}{" "}
            </h2>{" "}
            <p className="mt-4 mb-6 text-4xl"> {item.summary} </p>{" "}
          </div>{" "}
        </div>
        {heroImage && (
          <GatsbyImage
            image={heroImage.childImageSharp.gatsbyImageData}
            alt={`${item.title} hero image`}
            className="shadow-xl rounded-lg  max-h-[700px] mb-20"
          />
        )}{" "}
        <div className="portfolio-section">
          <h3> Overview </h3>{" "}
          <div
            dangerouslySetInnerHTML={{
              __html: itemHtml.overview,
            }}
          />{" "}
        </div>{" "}
        <BrowserWindow className="shadow-xl mb-20">
          <video
            autoPlay
            muted
            loop
            playsInline
            className="rounded-lg shadow-lg w-full max-w-2xl mx-auto"
          >
            <source src={`/portfolio_${item.slug}.webm`} type="video/webm" />
            Your browser does not support the video tag.{" "}
          </video>{" "}
        </BrowserWindow>{" "}
        <div className="portfolio-section">
          <h3> Problem </h3>{" "}
          <div
            dangerouslySetInnerHTML={{
              __html: itemHtml.problemHtml,
            }}
          />{" "}
        </div>{" "}
        <div className="portfolio-section">
          <h3> Solution </h3>{" "}
          <div
            dangerouslySetInnerHTML={{
              __html: itemHtml.solutionHtml,
            }}
          />{" "}
        </div>{" "}
        <div className="portfolio-section">
          <h3> Impact </h3>{" "}
          <div
            dangerouslySetInnerHTML={{
              __html: itemHtml.impactHtml,
            }}
          />{" "}
        </div>
        <div className="flex flex-wrap gap-9">
          {" "}
          {gridImages.length > 0 && (
            <>
              {" "}
              {gridImages.map((img, i) => (
                <GatsbyImage
                  key={i}
                  image={img.childImageSharp.gatsbyImageData}
                  alt={`${item.title} grid image ${i + 4}`}
                  className="shadow-xl rounded-lg basis-[20vw] flex-1"
                  objectPosition="center"
                  objectFit="fill"
                />
              ))}{" "}
            </>
          )}{" "}
        </div>{" "}
      </section>{" "}
    </Layout>
  );
};

export default AIWorkflowLogging;
